Харківський національний університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 
ЗВІТ 
з дисципліни “Архітектура програмного забезпечення” 
до лабораторної роботи №2 
на тему: “РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ СИСТЕМИ” 
 
 
 
 
Виконав ст. гр. ПЗПІ-22-2  Терновий Данііл Павлович  
 
Ст. викл. кафедри ПІ  Сокорчук Ігор Петрович 
 
 
 
 
 
 






 
Харків 2025 


1 МЕТА РОБОТИ 
 
      Метою  роботи  є  розробити  базу  даних  для  серверної  частини  та прикладного  програмного  інтерфейсу  для  програмної  системи  оренди малих складів. 
 
2 ХІД РОБОТИ 
 
      Робота над лабораторним проектом розпочалася зі створення детального проекту системи. Першим етапом стало проектування UML-діаграми прецедентів для системи оренди складів, яка охоплює основні та спеціалізовані функції. Для забезпечення чіткості та деталізації, діаграма була розбита на кілька частин, що наведені у Додатку А. 
      На другому етапі було створено ER-діаграму, яка демонструє зв’язки між сутностями системи та слугує основою для моделювання даних. Побудована ER-діаграма представлена у Додатку Б, а на її основі розроблена структура бази даних, відображена у вигляді діаграми в Додатку В. 
      Наступним кроком стала розробка API для забезпечення взаємодії між серверною частиною системи та клієнтами. Для документування API підготовлено Swagger специфікацію у Додатку Г, яка містить детальний опис усіх ендпоінтів, їх параметрів, типів даних та очікуваних відповідей. Це спрощує інтеграцію з клієнтськими додатками. 
      Приклади коду серверної частини, що демонструють ключові аспекти реалізації системи, наведені у Додатку Д. Повний вихідний код проекту завантажено на платформу GitHub. 
      Під час розробки API були прийняті наступні інженерні рішення для забезпечення стабільності та гнучкості системи: 
 
      Серверна частина побудована на базі ASP.NET з використанням Entity Framework. Кожен компонент системи є незалежним, що включає контролер та сервіс для реалізації конкретних функцій. Це дозволяє спрощено масштабувати систему, імпортувати необхідні моделі для взаємодії з базою даних та експортувати сервіси для використання в інших модулях. 
      Для роботи з базою даних використано Entity Framework в поєднанні з MSSQL, що забезпечує зручне управління даними, ефективність внесення змін та оптимізацію запитів. 
      Системою управління базами даних обрано MSSQL, розміщену в хмарному середовищі. Це забезпечує віддалене зберігання даних, підвищуючи продуктивність проекту та зручність його використання. 
 
3   ВИСНОВКИ 
 
      Під час виконання лабораторної роботи вдалося успішно досягти основної мети — розробити серверну частину та прикладний програмний інтерфейс (API) для системи оренди складів, яка відповідає сучасним стандартам якості та функціональності. Виконання послідовних етапів, від створення UML-діаграми прецедентів до розробки та документування API, забезпечило структурованість і ефективність процесу розробки. 
      Використання ASP.NET з Entity Framework та модульною архітектурою надало системі високу гнучкість і легкість масштабування. Впровадження Entity Framework сприяло ефективному управлінню даними в MSSQL, обраній як основна система управління базами даних. Розміщення бази даних у хмарі забезпечило зручний віддалений доступ і підвищило продуктивність, що є критично важливим для сучасних програмних рішень. 
      Загалом, лабораторна робота продемонструвала використання сучасних підходів до проєктування програмних систем, що сприяють створенню масштабованих, надійних і ефективних рішень. Використані технології та інструменти, такі як ASP.NET, Entity Framework, MSSQL, дозволили створити високоякісну систему, готову до реального використання та подальшого розширення. 
      Публікація коду на платформі GitHub підвищила доступність проєкту та його готовність до подальшого розвитку. 
 
 


ДОДАТОК А
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/AWRQZ0rmSO8
0:00 – Вступ
0:10 – Робота з сутністю Menu
1:50 – Робота з MenuItem
3:30 – Робота з Order
6:40 – Робота з OrderItem
9:00 – Робота з Review
10:55 – Висновок

ДОДАТОК Б 
Графічні матеріали


Рисунок Б.1 — ER-діаграма даних


Рисунок Б.2 — Структура бази даних


Рисунок Б.3 — UML-діаграма прецедентів


ДОДАТОК В 
Програмний код


      В.1 Математична обробка прикладних даних

GitHub репозиторій: https://github.com/NureTernovyiDaniil/apz-pzpi-22-2-ternovyi-daniil/blob/main/Lab2/apz-pzpi-22-2-ternovyi-daniil-lab2/Services/OrdersService.cs

1 using AutoMapper;
2 using ChefMate_backend.Models;
3 using ChefMate_backend.Repositories;
4 
5 namespace ChefMate_backend.Services
6 {
7     public class OrdersService
8     {
9         private readonly IOrderRepository _orderRepository;
10         private readonly IOrderItemRepository _orderItemRepository;
11         private readonly IMapper _mapper;
12         private readonly IMenuItemRepository _menuItemRepository;
13 
14         public OrdersService(IOrderRepository orderRepository, IMapper mapper, 
15             IMenuItemRepository menuItemRepository, IOrderItemRepository orderItemRepository)
16         {
17             _orderRepository = orderRepository;
18             _mapper = mapper;
19             _menuItemRepository = menuItemRepository;
20             _orderItemRepository = orderItemRepository;
21         }
22 
23         public async Task HandleOrder(Guid orderId)
24         {
25             var order = await _orderRepository.Retrieve(orderId);
26             if (order == null)
27             {
28                 throw new KeyNotFoundException($"Order doesn`t exists");
29             }
30 
31             var menuItemIds = order.OrderItems
32                 .Select(x => x.MenuItemId)
33                 .Distinct()
34                 .ToList();
35 
36             var menuItems = await _menuItemRepository.Retrieve(menuItemIds);
37             var menuItemsDict = menuItems.ToDictionary(m => m.Id, m => m.Price);
38 
39             foreach (var orderItem in order.OrderItems)
40             {
41                 if (menuItemsDict.TryGetValue(orderItem.MenuItem.Id, out var price))
42                 {
43                     orderItem.Price = price;
44                     await _orderItemRepository.Update(_mapper.Map<OrderItemDto>(orderItem));
45                 }
46             }
47 
48             order.TotalAmount = order.OrderItems.Sum(x => x.Price * x.Quantity);
49 
50             var orderDto = _mapper.Map<OrderDto>(order);
51             await _orderRepository.Update(orderDto);
52         }
53     }
54 }
55

      В.2 Резервне копіювання користувацьких даних

GitHub репозиторій: https://github.com/NureTernovyiDaniil/apz-pzpi-22-2-ternovyi-daniil/blob/main/Lab2/apz-pzpi-22-2-ternovyi-daniil-lab2/Services/DatabaseBackupService.cs

1 using System.Data.SqlClient;
2 
3 public class DatabaseBackupService
4 {
5     private readonly string _connectionString;
6 
7     public DatabaseBackupService(IConfiguration configuration)
8     {
9         _connectionString = configuration.GetConnectionString("DefaultConnection");
10     }
11 
12     public async Task<string> CreateBackupAsync()
13     {
14         var databaseName = new SqlConnectionStringBuilder(_connectionString).InitialCatalog;
15         var fileName = $"backup_{DateTime.Now:yyyyMMdd_HHmmss}.bak";
16         var backupFolder = Path.Combine(Path.GetTempPath(), "DbBackups");
17 
18         Directory.CreateDirectory(backupFolder);
19 
20         var backupFilePath = Path.Combine(backupFolder, fileName);
21 
22         var backupSql = $@"
23             BACKUP DATABASE [{databaseName}]
24             TO DISK = @BackupFilePath
25             WITH FORMAT,
26                  MEDIANAME = 'DbBackups',
27                  NAME = 'Full Backup of {databaseName}';";
28 
29         using var connection = new SqlConnection(_connectionString);
30         using var command = new SqlCommand(backupSql, connection);
31         command.Parameters.AddWithValue("@BackupFilePath", backupFilePath);
32 
33         await connection.OpenAsync();
34         await command.ExecuteNonQueryAsync();
35 
36         return backupFilePath;
37     }
38 }

      В.3 Адміністрування бізнес-логіки системи

GitHub репозиторій: https://github.com/NureTernovyiDaniil/apz-pzpi-22-2-ternovyi-daniil/blob/main/Lab2/apz-pzpi-22-2-ternovyi-daniil-lab2/Program.cs

1 using AutoMapper;
2 using ChefMate_backend;
3 using ChefMate_backend.Models;
4 using ChefMate_backend.Repositories;
5 using Microsoft.EntityFrameworkCore;
6 using System.Text;
7 
8 var builder = WebApplication.CreateBuilder(args);
9 
10 builder.Services.AddDbContext<ApplicationDbContext>(options =>
11     options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
12 
13 builder.Services.AddDbContext<IdentityContext>(options =>
14     options.UseSqlServer(builder.Configuration.GetConnectionString("IdentityConnection")));
15 
16 IMapper mapper = MappingConfig.RegisterMaps().CreateMapper();
17 builder.Services.AddSingleton(mapper);
18 builder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
19 
20 builder.Services.AddControllersWithViews();
21 
22 builder.Services.ConfigureApplicationCookie(options =>
23 {
24     options.ExpireTimeSpan = TimeSpan.FromDays(14);
25     options.SlidingExpiration = true;
26 });
27 
28 builder.Services.AddScoped<IOrderRepository, OrderRepository>();
29 builder.Services.AddScoped<IOrderItemRepository, OrderItemRepository>();
30 builder.Services.AddScoped<IReviewRepository, ReviewRepository>();
31 builder.Services.AddScoped<IMenuItemRepository, MenuItemRepository>();
32 builder.Services.AddScoped<IMenuRepository, MenuRepository>();
33 builder.Services.AddScoped<IOrganizationRepository, OrganizationRepository>();
34 
35 builder.Services.AddControllers()
36 .AddJsonOptions(options =>
37 {
38     options.JsonSerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles;
39 });
40 
41 builder.Services.AddSwaggerGen(options =>
42 {
43     options.SwaggerDoc("v1", new OpenApiInfo { Title = "ChefMate", Version = "v1" });
44 });
45 
46 var app = builder.Build();
47 
48 using (var scope = app.Services.CreateScope())
49 {
50     var services = scope.ServiceProvider;
51 
52     try
53     {
54         var context = services.GetRequiredService<ApplicationDbContext>();
55         context.Database.Migrate();
56 
57         var identityContext = services.GetRequiredService<IdentityContext>();
58         identityContext.Database.Migrate();
59     }
60     catch (Exception ex)
61     {
62         var logger = services.GetRequiredService<ILogger<Program>>();
63         logger.LogError(ex, "Error occurred while migrating the database");
64     }
65 }
66 
67 if (app.Environment.IsDevelopment())
68 {
69     app.UseDeveloperExceptionPage();
70     app.UseSwagger();
71     app.UseSwaggerUI(c =>
72     {
73         c.SwaggerEndpoint("/swagger/v1/swagger.json", "ChefMate V1");
74         c.RoutePrefix = "swagger";
75     });
76 }
77 else
78 {
79     app.UseExceptionHandler("/Home/Error");
80     app.UseHsts();
81 }
82 
83 app.UseHttpsRedirection();
84 app.UseStaticFiles();
85 
86 app.UseRouting();
87 
88 app.UseAuthentication();
89 app.UseAuthorization();
90 
91 app.MapControllerRoute(
92     name: "default",
93     pattern: "{controller=Home}/{action=Index}/{id?}");
94 
95 app.Run();
